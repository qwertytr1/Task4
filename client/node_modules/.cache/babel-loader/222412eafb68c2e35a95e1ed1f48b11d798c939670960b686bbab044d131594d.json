{"ast":null,"code":"// utils/fetchUsers.ts\nconst fetchUsersData=async userToken=>{if(!userToken){throw new Error('User token is required');}try{const response=await fetch('http://localhost:8081/users',{headers:{Authorization:`Bearer ${userToken}`}});if(!response.ok){throw new Error('Failed to fetch users');}const data=await response.json();return data;// Return the raw user data\n}catch(error){console.error(error);throw new Error('Error fetching users. Please try again later.');}};export default fetchUsersData;","map":{"version":3,"names":["fetchUsersData","userToken","Error","response","fetch","headers","Authorization","ok","data","json","error","console"],"sources":["/Users/mahnach04icloud.com/Desktop/Новая папка 2/Task4/client/src/utils/fetchUsers.ts"],"sourcesContent":["import { User } from './interfaces';\n\n// utils/fetchUsers.ts\n\nconst fetchUsersData = async (userToken: string) => {\n  if (!userToken) {\n    throw new Error('User token is required');\n  }\n\n  try {\n    const response = await fetch('http://localhost:8081/users', {\n      headers: {\n        Authorization: `Bearer ${userToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch users');\n    }\n\n    const data: User[] = await response.json();\n    return data; // Return the raw user data\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error fetching users. Please try again later.');\n  }\n};\n\nexport default fetchUsersData;\n"],"mappings":"AAEA;AAEA,KAAM,CAAAA,cAAc,CAAG,KAAO,CAAAC,SAAiB,EAAK,CAClD,GAAI,CAACA,SAAS,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAE,CAC1DC,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUL,SAAS,EACpC,CACF,CAAC,CAAC,CAEF,GAAI,CAACE,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAL,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA,KAAM,CAAAM,IAAY,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC1C,MAAO,CAAAD,IAAI,CAAE;AACf,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CACpB,KAAM,IAAI,CAAAR,KAAK,CAAC,+CAA+C,CAAC,CAClE,CACF,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}