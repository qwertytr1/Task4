{"ast":null,"code":"export const fetchUsersData = async userToken => {\n  if (!userToken) {\n    throw new Error('User token is required');\n  }\n  try {\n    const response = await fetch('http://localhost:8081/users', {\n      headers: {\n        Authorization: `Bearer ${userToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch users');\n    }\n    const data = await response.json();\n    return data; // Return the raw user data\n  } catch (error) {\n    console.error(error);\n    throw new Error('Error fetching users. Please try again later.');\n  }\n};","map":{"version":3,"names":["fetchUsersData","userToken","Error","response","fetch","headers","Authorization","ok","data","json","error","console"],"sources":["/Users/mahnach04icloud.com/Desktop/Новая папка 2/Task4/front-end/src/utils/fetchUsers.ts"],"sourcesContent":["import { User } from \"./interfaces\";\n\nexport const fetchUsersData = async (userToken: string) => {\n    if (!userToken) {\n      throw new Error('User token is required');\n    }\n\n    try {\n      const response = await fetch('http://localhost:8081/users', {\n        headers: {\n          Authorization: `Bearer ${userToken}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n\n      const data: User[] = await response.json();\n      return data; // Return the raw user data\n    } catch (error) {\n      console.error(error);\n      throw new Error('Error fetching users. Please try again later.');\n    }\n  };"],"mappings":"AAEA,OAAO,MAAMA,cAAc,GAAG,MAAOC,SAAiB,IAAK;EACvD,IAAI,CAACA,SAAS,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUL,SAAS;MACpC;IACF,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIL,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,MAAMM,IAAY,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC1C,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAM,IAAIR,KAAK,CAAC,+CAA+C,CAAC;EAClE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}