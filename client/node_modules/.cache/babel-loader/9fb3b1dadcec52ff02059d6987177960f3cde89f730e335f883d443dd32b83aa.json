{"ast":null,"code":"import React,{createContext,useState,useContext,useMemo}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(()=>{const token=localStorage.getItem('authToken');return!!token;// Проверяем наличие токена для определения статуса аутентификации\n});const login=token=>{if(token){localStorage.setItem('authToken',token);setIsAuthenticated(true);}else{console.error('Invalid token received. Token was not saved.');}};const logout=()=>{// Удаляем токен из localStorage и обновляем состояние\nlocalStorage.removeItem('authToken');setIsAuthenticated(false);};const value=useMemo(()=>({isAuthenticated,login,logout}),[isAuthenticated]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useMemo","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","login","setItem","console","error","logout","removeItem","value","Provider","useAuth","context","Error"],"sources":["/Users/mahnach04icloud.com/Desktop/Новая папка 2/Task4/client/src/components/AuthProvider/AuthProvider.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useState,\n  useContext,\n  ReactNode,\n  useMemo,\n} from 'react';\nimport { AuthContextType, AuthProviderProps } from '../../utils/interfaces';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const token = localStorage.getItem('authToken');\n    return !!token; // Проверяем наличие токена для определения статуса аутентификации\n  });\n\n  const login = (token: string | null) => {\n    if (token) {\n      localStorage.setItem('authToken', token);\n      setIsAuthenticated(true);\n    } else {\n      console.error('Invalid token received. Token was not saved.');\n    }\n  };\n\n  const logout = () => {\n    // Удаляем токен из localStorage и обновляем состояние\n    localStorage.removeItem('authToken');\n    setIsAuthenticated(false);\n  };\n\n  const value = useMemo(\n    () => ({ isAuthenticated, login, logout }),\n    [isAuthenticated],\n  );\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EACVC,aAAa,CACbC,QAAQ,CACRC,UAAU,CAEVC,OAAO,KACF,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAGf,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAA8BO,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGX,QAAQ,CAAC,IAAM,CAC3D,KAAM,CAAAY,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAC/C,MAAO,CAAC,CAACF,KAAK,CAAE;AAClB,CAAC,CAAC,CAEF,KAAM,CAAAG,KAAK,CAAIH,KAAoB,EAAK,CACtC,GAAIA,KAAK,CAAE,CACTC,YAAY,CAACG,OAAO,CAAC,WAAW,CAAEJ,KAAK,CAAC,CACxCD,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,IAAM,CACLM,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC,CAC/D,CACF,CAAC,CAED,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnB;AACAN,YAAY,CAACO,UAAU,CAAC,WAAW,CAAC,CACpCT,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CAAC,CAED,KAAM,CAAAU,KAAK,CAAGnB,OAAO,CACnB,KAAO,CAAEQ,eAAe,CAAEK,KAAK,CAAEI,MAAO,CAAC,CAAC,CAC1C,CAACT,eAAe,CAClB,CAAC,CAED,mBAAON,IAAA,CAACC,WAAW,CAACiB,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAZ,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CAC9E,CAAC,CAED,MAAO,MAAM,CAAAc,OAAO,CAAGA,CAAA,GAAuB,CAC5C,KAAM,CAAAC,OAAO,CAAGvB,UAAU,CAACI,WAAW,CAAC,CACvC,GAAI,CAACmB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}